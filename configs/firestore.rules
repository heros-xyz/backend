rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated(){
      return request.auth!=null
    }
    function isAuthenticatedWithUid(uid){
      return (isAuthenticated() && request.auth.uid==uid)
    }
    function isAuthenticatedWithUids(uids){
      return request.auth.uid in uids;
    }
    function hasAnyRoles(roles){
      return request.auth.token.roles.hasAny(roles);
    }
    function onlyUpdateFields(fields){
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)
    }
    function notTouchFields(fields){
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)
    }
    // Public
    match /public/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    match /membershipTiers/{document=**} {
      allow read:  if isAuthenticated();
      allow write: if isAuthenticatedWithUid(resource.data.uid) && notTouchFields(['stripeProduct', 'stripePrice']);
    }
    match /reaction/{id} {
      allow read: if isAuthenticated();
      allow delete: if isAuthenticatedWithUid(resource.data.uid);
      allow create: if isAuthenticatedWithUid(resource.data.uid) && id == resource.data.uid+'_'+resource.data.to;
    }
    match /comments/{id} {
        allow read: if isAuthenticated() && get(/databases/$(database)/documents/subscription/$(request.auth.uid+'_'+resource.data.to)).stripeSubscription != null;
    }
    // Private
    match /paymentMethods/{document=**} {
      allow read:  if isAuthenticatedWithUid(resource.data.uid);
      allow write: if isAuthenticatedWithUid(resource.data.uid) && notTouchFields(['stripePayment']);
    }
    match /user/{uid} {
      allow read:  if isAuthenticatedWithUid(uid);
      allow write: if isAuthenticatedWithUid(uid) && notTouchFields(['stripeCustomer']);
    }
    match /fanProfile/{uid} {
      allow read:  if isAuthenticated();
      allow write: if isAuthenticatedWithUid(uid);
    }
    match /subscription/{id}{
      allow read:  if isAuthenticatedWithUids([resource.data.maker,resource.data.taker]);
    }
    match /withdrawalRequests/{id}{
      allow read, create: if isAuthenticatedWithUid(resource.data.uid);
    }
    // Default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
