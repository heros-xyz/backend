rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // [READ] Data that exists on the Firestore document
    function existingData() {
      return resource.data;
    }
    // [WRITE] Data that is sent to a Firestore document
    function incomingData() {
      return request.resource.data;
    }
    function isAuthenticated(){
      return request.auth != null;
    }
    function isAuthenticatedWithUid(uid){
      return (isAuthenticated() && request.auth.uid==uid)
    }
    function isAuthenticatedWithUids(uids){
      return uids != null && request.auth.uid in uids && uids[request.auth.uid] != null;
    }
    function isAuthenticatedAs(type){
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.profileType == type;
    }
    function hasActiveSubscription(subscriptionId){
      // subscriptions/<FAN_ATHLETE>
      return get(/databases/$(database)/documents/subscriptions/$(subscriptionId)).data.status == 1;
    }
    function hasAnyRoles(roles){
      return request.auth.token.roles.hasAny(roles);
    }
    function onlyUpdateFields(fields){
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)
    }
    function notTouchFields(fields){
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields)
    }
    function canSeeComment(){
      let postUid = get(/databases/$(database)/documents/post/$(resource.data.post)).data.uid;
      return isAuthenticatedAs("ATHLETE") ||  hasActiveSubscription(request.auth.uid+'_'+postUid);
    }
    // Public
    match /public/{document=**} {
      allow read: if isAuthenticated();
      allow write: if false;
    }
    match /membershipTiers/{document=**} {
      allow read: if  true; // TODO: check how to handle this for public page
      allow write: if isAuthenticatedWithUid(resource.data.uid) && notTouchFields(['stripeProduct', 'stripePrice']);
    }
    match /reactions/{id} {
      allow read: if isAuthenticated();
      allow delete: if isAuthenticatedWithUid(resource.data.uid);
      allow create: if isAuthenticatedWithUid(request.resource.data.uid) && id == request.resource.data.uid+'_'+request.resource.data.to;
    }
    match /comments/{id} {
        allow read: if canSeeComment();
        allow create: if false;
    }
    match /post/{id} {
        allow write: if isAuthenticatedAs("ATHLETE")
        allow read: if isAuthenticatedAs("ATHLETE") || hasActiveSubscription(request.auth.uid+'_'+resource.data.uid);
    }
    match /notification/{id} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.uid;
    }
    match /fanProfile/{uid} {
      allow write: if isAuthenticatedWithUid(uid);
      allow update: if isAuthenticatedWithUid(uid);
      allow read: if isAuthenticatedWithUid(uid);
    }
    match /athleteProfile/{uid} {
      allow read:  if true; // Public profile
      allow write: if isAuthenticatedWithUid(uid);
    }
    match /careerJourneys/{id} {
      allow read:  if true; // Public data
      allow create: if isAuthenticatedWithUid(request.resource.data.uid);
      allow update, delete: if isAuthenticatedWithUid(resource.data.uid);
    }
    // Private
    match /paymentMethods/{document=**} {
      allow read:  if isAuthenticatedWithUid(resource.data.uid);
      allow create: if isAuthenticatedWithUid(request.resource.data.uid); //&& notTouchFields(['stripePayment']);
      allow update: if isAuthenticatedWithUid(resource.data.uid) && notTouchFields(['stripePayment']);
    }
    match /user/{uid} {
      allow read:  if isAuthenticatedWithUid(uid);
      allow write: if isAuthenticatedWithUid(uid) && notTouchFields(['stripeCustomer','netAmount']);
    }
    match /subscriptions/{document=**} {
      allow read:  if  resource.data.maker == request.auth.uid || resource.data.taker == request.auth.uid;
    }
    match /withdrawalRequests/{id}{
      allow read: if isAuthenticatedWithUid(resource.data.uid);
      allow create: if isAuthenticatedAs("ATHLETE");
    }
    match /invoice/{id}{
      allow read: if isAuthenticatedWithUid(resource.data.uid);
    }
    // Default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
